<?php

namespace App\Entity;

use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * User
 *
 * @ORM\Table(name="user")
 * @ORM\Entity(repositoryClass="App\Entity\UserRepository")
 */
class User extends BaseUser implements UserInterface, \Serializable
{
    public function __construct()
    {
        parent::__construct();
        // your own logic
    }
    /**
     * @var string
     * @ORM\Column(name="forename", type="string", length=200, nullable=true)
     */
    private $forename;

    /**
     * @var string
     * @ORM\Column(name="surname", type="string", length=200, nullable=true)
     */
    private $surname;

    /**
     * @var string
     * @ORM\Column(name="zip", type="string", length=10, nullable=true)
     */
    private $zip;

    /**
     * @var string
     * @ORM\Column(name="city", type="string", length=200, nullable=true)
     */
    private $city;

    /**
     * @var string
     * @ORM\Column(name="country", type="string", length=200, nullable=true)
     */
    private $country;

    /**
     * @var string
     * @ORM\Column(name="phone", type="string", length=50, nullable=true)
     */
    private $phone;

    /**
     * @var string
     * @ORM\Column(name="mail", type="string", length=500, nullable=true)
     */
    private $mail;

    /**
     * @var string
     * @ORM\Column(name="occupation", type="string", length=200, nullable=true)
     */
    private $occupation;

    /**
     * @var string
     * @ORM\Column(name="password_hash", type="string", length=500, nullable=true)
     */
    private $passwordHash;

    /**
     * @var boolean
     * @ORM\Column(name="verified", type="boolean", nullable=false)
     */
    // private $verified = '0'; // this has been generated by the "doctrine ORM". Its wrong.
	private $verified=false;

    /**
     * @var boolean
     * @ORM\Column(name="is_admin", type="boolean", nullable=false)
     */
    //private $isAdmin = '0'; // this has been generated by the "doctrine ORM". Its wrong.
	private $isAdmin = false;

    /**
     * @var string
     * @ORM\Column(name="gender", type="string", length=1, nullable=false)
     */
    private $gender='';

    /**
     * @var string
     * @ORM\Column(name="street", type="string", length=200, nullable=true)
     */
    private $street;

    /**
     * @var \DateTime
     * @ORM\Column(name="date_of_birth", type="date", nullable=true)
     */
    private $dateOfBirth;

    /**
     * @var integer
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    protected $id;



    /**
     * Set forename
     * @param string $forename
     * @return User
     */
    public function setForename($forename)
    {
        $this->forename = $forename;

        return $this;
    }

    /**
     * Get forename
     * @return string
     */
    public function getForename()
    {
        return $this->forename;
    }

    /**
     * Set surname
     * @param string $surname
     * @return User
     */
    public function setSurname($surname)
    {
        $this->surname = $surname;

        return $this;
    }

    /**
     * Get surname
     * @return string
     */
    public function getSurname()
    {
        return $this->surname;
    }

    /**
     * Set zip
     * @param string $zip
     * @return User
     */
    public function setZip($zip)
    {
        $this->zip = $zip;

        return $this;
    }

    /**
     * Get zip
     * @return string
     */
    public function getZip()
    {
        return $this->zip;
    }

    /**
     * Set city
     * @param string $city
     * @return User
     */
    public function setCity($city)
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Get city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Set country
     * @param string $country
     * @return User
     */
    public function setCountry($country)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Get country
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set phone
     * @param string $phone
     * @return User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set mail
     * @param string $mail
     * @return User
     */
    public function setMail($mail)
    {
        $this->mail = $mail;

        return $this;
    }

    /**
     * Get mail
     * @return string
     */
    public function getMail()
    {
        return $this->mail;
    }

    /**
     * Set occupation
     * @param string $occupation
     * @return User
     */
    public function setOccupation($occupation)
    {
        $this->occupation = $occupation;

        return $this;
    }

    /**
     * Get occupation
     * @return string
     */
    public function getOccupation()
    {
        return $this->occupation;
    }

    /**
     * Set passwordHash
     * @param string $passwordHash
     * @return User
     */
    public function setPasswordHash($passwordHash)
    {
        $this->passwordHash = $passwordHash;

        return $this;
    }

    /**
     * Get passwordHash
     * @return string
     */
    public function getPasswordHash()
    {
        return $this->passwordHash;
    }

    /**
     * Set verified
     * @param boolean $verified
     * @return User
     */
    public function setVerified($verified)
    {
        $this->verified = $verified;

        return $this;
    }

    /**
     * Get verified
     * @return boolean
     */
    public function getVerified()
    {
        return $this->verified;
    }

    /**
     * Set isAdmin
     * @param boolean $isAdmin
     * @return User
     */
    public function setIsAdmin($isAdmin)
    {
        $this->isAdmin = $isAdmin;

        return $this;
    }

    /**
     * Get isAdmin
     * @return boolean
     */
    public function getIsAdmin()
    {
        return $this->isAdmin;
    }

    /**
     * Set gender
     * @param string $gender
     * @return User
     */
    public function setGender($gender){
        $this->gender=$gender;
        return $this;
    }

    /**
     * Get gender
     * @return string
     */
    public function getGender(){
        return $this->gender;
    }

    /**
     * Set street
     * @param string $street
     * @return User
     */
    public function setStreet($street){
        $this->street=$street;
        return $this;
    }

    /**
     * Get street
     * @return string
     */
     public function getStreet(){
         return $this->street;
     }

    /**
     * Set dateOfBirth
     * @param \DateTime $dateOfBirth
     * @return User
     */
    public function setDateOfBirth($dateOfBirth){
        $this->dateOfBirth=$dateOfBirth;
        return $this;
    }

    /**
     * Get dateOfBirth
     * @return \DateTime
     */
    public function getDateOfBirth(){
        return $this->dateOfBirth;
    }

    /**
     * Get id
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }


// Start implementing UserInterface:

    /**
     * Returns the roles granted to the user.
     * <code>
     * public function getRoles()
     * {
     *     return array('ROLE_USER');
     * }
     * </code>
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     * @return (Role|string)[] The user roles
     */
    public function getRoles(){
		if($this->isAdmin){
			return array('ROLE_ADMIN','ROLE_USER');
		}
        return array('ROLE_USER');
	}

    /**
     * Returns the password used to authenticate the user.
     * This should be the encoded password. On authentication, a plain-text
     * password will be salted, encoded, and then compared to this value.
     * @return string The password
     */
    public function getPassword(){
		return $this->passwordHash;
	}

    /**
     * Returns the salt that was originally used to encode the password.
     * This can return null if the password was not encoded using a salt.
     * @return string|null The salt
     */
    public function getSalt(){
		return null; // bcrypt needs no salt
	}

    /**
     * Returns the username used to authenticate the user.
     * @return string The username
     */
    public function getUsername(){
		return $this->mail;
	}

    /**
     * Removes sensitive data from the user.
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     */
    public function eraseCredentials(){
	}

// Start implementing "\Serializable" (this is a php interface)
   /** @see \Serializable::serialize() */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->mail,
            $this->passwordHash,
            // see section on salt below
            // $this->salt,
        ));
    }

    /** @see \Serializable::unserialize() */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->mail,
            $this->passwordHash,
            // see section on salt below
            // $this->salt
        ) = unserialize($serialized);
    }

}
