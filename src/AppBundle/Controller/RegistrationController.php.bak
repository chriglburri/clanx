<?php

namespace App\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use App\Entity\User;

/**
 * Controls how a new user creates a new account.
 *
 * @Route("/registration")
 */
class RegistrationController extends Controller
{
    /**
     * @Route("/", name="registration_index")
     * @Method({"GET", "POST"})
     */
    public function indexAction(Request $request)
    {
        if($request->getMethod()=="POST"){
            $user = new User();
            $user->setGender($request->request->get('gender', ''));
            $user->setForename($request->request->get('forename', ''));
            $user->setSurname($request->request->get('surname', ''));
            $user->setStreet($request->request->get('street',''));
            $user->setZip($request->request->get('zip',''));
            $user->setCity($request->request->get('city',''));
            $user->setCountry($request->request->get('country',''));
            $user->setPhone($request->request->get('phone',''));
            $user->setMail($request->request->get('mail',''));
            $user->setOccupation($request->request->get('occupation',''));
            $dob = new \DateTime($request->request->get('dateOfBirth'));
            $user->setDateOfBirth($dob);
            // see app/config/security.yml
            $password = $request->request->get('password','');
            $encoder = $this->container->get('security.password_encoder');
            $hash = $encoder->encodePassword($user, $password);
            $user->setPasswordHash($hash);
            $user->setVerified(false); // an account must be verified by email.

            $em = $this->getDoctrine()->getManager();
            $em->persist($user); // not yet sql
            $em->flush(); // now sql

            return $this->redirectToRoute('homepage');
        }
        return $this->render('registration/index.html.twig');
    }

    /**
     * Requested asynchronously to verify that the email address is unique
     * @Route("/validateMail", name="registation_validateMail")
     * @Method({"GET", "POST"})
     */
    public function validateMailAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $mail = $request->query->get('mail');
        $existingUser = $em->getRepository('AppBundle:User')->findOneByMail($mail);
        if($existingUser){
            return new Response('false');
        }
        return new Response('true');
    }
}
